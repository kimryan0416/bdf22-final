{"ast":null,"code":"var _jsxFileName = \"/Users/ryankim/Desktop/Essential_Stuff/NYU_PhD/Fall2022/Big Data [CS-GY-6513]/test-app/src/components/map/map.js\",\n  _s = $RefreshSig$();\nimport { useRef, useEffect } from 'react';\nimport * as d3 from 'd3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Map = props => {\n  _s();\n  const {\n    geoJson\n  } = props;\n  const svgRef = useRef();\n  const renderMap = (mapData, path) => {\n    console.log(mapData.features);\n    const maxPrecincts = mapData.reduce((accumulator, next) => {\n      if (next.properties[\"Precinct\"] > accumulator) accumulator = next.properties[\"Precinct\"];\n      return accumulator;\n    }, 0);\n    var myColor = d3.scaleLinear().domain([1, maxPrecincts]).range([\"red\", \"blue\"]);\n    d3.select(svgRef.current).selectAll('path').data(mapData.features).enter().append('path').attr('id', d => `precinct-${d.properties['Precinct']}`).attr('d', path).attr('stroke', '#000000').attr('stroke-width', '.2').attr('fill', d => myColor(d.properties['Precinct']));\n  };\n  useEffect(() => {\n    const height = svgRef.current.clientHeight;\n    const width = svgRef.current.clientWidth;\n    const projection = d3.geoAlbers().fitSize([height, width], geoJson);\n    const pathGenerator = d3.geoPath().projection(projection);\n    if (geoJson) {\n      renderMap(geoJson, pathGenerator);\n    }\n  }, [geoJson]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"wrapper\",\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      className: \"precincts-map\",\n      ref: svgRef,\n      height: 500,\n      width: 500,\n      style: {\n        marginTop: '2em'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(Map, \"89Ty783ABEwsfMbSOeu9vscWF34=\");\n_c = Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["useRef","useEffect","d3","Map","props","geoJson","svgRef","renderMap","mapData","path","console","log","features","maxPrecincts","reduce","accumulator","next","properties","myColor","scaleLinear","domain","range","select","current","selectAll","data","enter","append","attr","d","height","clientHeight","width","clientWidth","projection","geoAlbers","fitSize","pathGenerator","geoPath","marginTop"],"sources":["/Users/ryankim/Desktop/Essential_Stuff/NYU_PhD/Fall2022/Big Data [CS-GY-6513]/test-app/src/components/map/map.js"],"sourcesContent":["import { useRef, useEffect } from 'react';\nimport * as d3 from 'd3';\n\nexport const Map = (props) => {\n\n  const { geoJson } = props;\n\n  const svgRef = useRef();\n\n  const renderMap = (mapData, path) => {\n  \tconsole.log(mapData.features);\n\n  \tconst maxPrecincts = mapData.reduce((accumulator,next)=>{\n  \t\tif (next.properties[\"Precinct\"] > accumulator) accumulator = next.properties[\"Precinct\"];\n  \t\treturn accumulator;\n  \t},0);\n\n  \tvar myColor = d3.scaleLinear().domain([1,maxPrecincts]).range([\"red\", \"blue\"]);\n\n    d3.select(svgRef.current)\n      .selectAll('path')\n      .data(mapData.features)\n      .enter()\n      .append('path')\n      .attr('id', d => `precinct-${d.properties['Precinct']}`)\n      .attr('d', path)\n      .attr('stroke', '#000000')\n      .attr('stroke-width', '.2')\n      .attr('fill', d => myColor(d.properties['Precinct']));\n  }\n\n  useEffect(() => {\n\n    const height = svgRef.current.clientHeight;\n    const width = svgRef.current.clientWidth;\n\n    const projection = d3.geoAlbers().fitSize([height, width], geoJson);\n\n\tconst pathGenerator = d3.geoPath().projection(projection);\n    if (geoJson) {\n      renderMap(geoJson, pathGenerator);\n    }\n  }, [geoJson]);\n\n  return (\n    <div className='wrapper'>\n      <svg \n        className='precincts-map' \n        ref={svgRef} \n        height={500} \n        width={500}\n        style={{marginTop: '2em'}}\n      />\n    </div>\n  );\n}"],"mappings":";;AAAA,SAASA,MAAM,EAAEC,SAAS,QAAQ,OAAO;AACzC,OAAO,KAAKC,EAAE,MAAM,IAAI;AAAC;AAEzB,OAAO,MAAMC,GAAG,GAAIC,KAAK,IAAK;EAAA;EAE5B,MAAM;IAAEC;EAAQ,CAAC,GAAGD,KAAK;EAEzB,MAAME,MAAM,GAAGN,MAAM,EAAE;EAEvB,MAAMO,SAAS,GAAG,CAACC,OAAO,EAAEC,IAAI,KAAK;IACpCC,OAAO,CAACC,GAAG,CAACH,OAAO,CAACI,QAAQ,CAAC;IAE7B,MAAMC,YAAY,GAAGL,OAAO,CAACM,MAAM,CAAC,CAACC,WAAW,EAACC,IAAI,KAAG;MACvD,IAAIA,IAAI,CAACC,UAAU,CAAC,UAAU,CAAC,GAAGF,WAAW,EAAEA,WAAW,GAAGC,IAAI,CAACC,UAAU,CAAC,UAAU,CAAC;MACxF,OAAOF,WAAW;IACnB,CAAC,EAAC,CAAC,CAAC;IAEJ,IAAIG,OAAO,GAAGhB,EAAE,CAACiB,WAAW,EAAE,CAACC,MAAM,CAAC,CAAC,CAAC,EAACP,YAAY,CAAC,CAAC,CAACQ,KAAK,CAAC,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;IAE7EnB,EAAE,CAACoB,MAAM,CAAChB,MAAM,CAACiB,OAAO,CAAC,CACtBC,SAAS,CAAC,MAAM,CAAC,CACjBC,IAAI,CAACjB,OAAO,CAACI,QAAQ,CAAC,CACtBc,KAAK,EAAE,CACPC,MAAM,CAAC,MAAM,CAAC,CACdC,IAAI,CAAC,IAAI,EAAEC,CAAC,IAAK,YAAWA,CAAC,CAACZ,UAAU,CAAC,UAAU,CAAE,EAAC,CAAC,CACvDW,IAAI,CAAC,GAAG,EAAEnB,IAAI,CAAC,CACfmB,IAAI,CAAC,QAAQ,EAAE,SAAS,CAAC,CACzBA,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,CAC1BA,IAAI,CAAC,MAAM,EAAEC,CAAC,IAAIX,OAAO,CAACW,CAAC,CAACZ,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC;EACzD,CAAC;EAEDhB,SAAS,CAAC,MAAM;IAEd,MAAM6B,MAAM,GAAGxB,MAAM,CAACiB,OAAO,CAACQ,YAAY;IAC1C,MAAMC,KAAK,GAAG1B,MAAM,CAACiB,OAAO,CAACU,WAAW;IAExC,MAAMC,UAAU,GAAGhC,EAAE,CAACiC,SAAS,EAAE,CAACC,OAAO,CAAC,CAACN,MAAM,EAAEE,KAAK,CAAC,EAAE3B,OAAO,CAAC;IAEtE,MAAMgC,aAAa,GAAGnC,EAAE,CAACoC,OAAO,EAAE,CAACJ,UAAU,CAACA,UAAU,CAAC;IACtD,IAAI7B,OAAO,EAAE;MACXE,SAAS,CAACF,OAAO,EAAEgC,aAAa,CAAC;IACnC;EACF,CAAC,EAAE,CAAChC,OAAO,CAAC,CAAC;EAEb,oBACE;IAAK,SAAS,EAAC,SAAS;IAAA,uBACtB;MACE,SAAS,EAAC,eAAe;MACzB,GAAG,EAAEC,MAAO;MACZ,MAAM,EAAE,GAAI;MACZ,KAAK,EAAE,GAAI;MACX,KAAK,EAAE;QAACiC,SAAS,EAAE;MAAK;IAAE;MAAA;MAAA;MAAA;IAAA;EAC1B;IAAA;IAAA;IAAA;EAAA,QACE;AAEV,CAAC;AAAA,GApDYpC,GAAG;AAAA,KAAHA,GAAG;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}